version: 2.1
commands:
  client-test:
    parameters:
      project:
        type: string
        default: "Client.Test"
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
            dotnet restore
            dotnet build --no-restore
      - run:
          name: Create a temp directory for artifacts
          command: |
            mkdir -p /tmp/artifacts
            mkdir test-results
      - run:
          name: Run tests
          command: dotnet test << parameters.project >> --collect "Xplat Code Coverage" --logger "junit;LogFilePath=../test-results/test-result.xml"
      - run:
          name: Coverage Report
          command: |
            dotnet tool install --tool-path="./reportgenerator/" dotnet-reportgenerator-globaltool
            ./reportgenerator/reportgenerator -reports:"<< parameters.project >>/TestResults/*/coverage.cobertura.xml" -targetdir:"report" -reporttypes:HtmlSummary "-sourcedirs:Client/"
            mv report/summary.html /tmp/artifacts
            cp test-results/test-result.xml /tmp/artifacts
          when: always
      - run:
          name: Report test results to codecov
          command: |
            apt-get update
            apt-get install gpg --yes
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
            curl https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
            gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -a 256 -c codecov.SHA256SUM
            chmod +x ./codecov
            ./codecov
      - store_artifacts:
          path: /tmp/artifacts
      - store_test_results:
          path: test-results


jobs:
  tests-java:
    parameters:
      maven-image:
        type: string
        default: &default-maven-image "cimg/openjdk:8.0"
    docker:
      - image: << parameters.maven-image >>
      - image: voltrondata/flight-sql:latest
        environment:
          FLIGHT_PASSWORD: "flight_password"
          PRINT_QUERIES: "1"
      - image: influxdb:latest
        environment:
          DOCKER_INFLUXDB_INIT_MODE: "setup"
          DOCKER_INFLUXDB_INIT_USERNAME: "my-user"
          DOCKER_INFLUXDB_INIT_PASSWORD: "my-password"
          DOCKER_INFLUXDB_INIT_ORG: "my-org"
          DOCKER_INFLUXDB_INIT_BUCKET: "my-bucket"
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: "my-token"
    steps:
      - checkout
      - restore_cache:
          name: Restoring Maven Cache
          keys:
            - &cache-key maven-cache_v1-<< parameters.maven-image >>-{{ checksum "pom.xml" }}
            - maven-cache_v3-<< parameters.maven-image >>-
      - run:
          name: "Running tests"
          command: |
            mvn -B -U clean install -Dbuild.env=CI
      - save_cache:
          name: Saving Maven Cache
          key: *cache-key
          paths:
            - ~/.m2
      - run:
          name: "Copying test results"
          when: always
          command: |
            mkdir test-results
            cp -r client-core/*/TEST-*.xml test-results/ || true
      - store_test_results:
          path: test-results
      - run:
          name: "Copying artifacts"
          command: |
            mkdir artifacts
            cp -r target/*.jar artifacts/
      - store_artifacts:
          path: artifacts
      - run:
          name: Collecting coverage reports
          command: |
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
            curl -s https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
            gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -a 256 -c codecov.SHA256SUM
            chmod +x ./codecov
            ./codecov

  check-dependencies:
    parameters:
      maven-image:
        type: string
        default: *default-maven-image
    docker:
      - image: *default-maven-image
    steps:
      - checkout
      - restore_cache:
          name: Restoring Maven Cache
          keys:
            - maven-cache_v1-<< parameters.maven-image >>-
      - run:
          name: "Check dependency rules"
          command: mvn enforcer:enforce -Drules=banDuplicatePomDependencyVersions,dependencyConvergence

  check-licenses:
    parameters:
      maven-image:
        type: string
        default: *default-maven-image
    docker:
      - image: << parameters.maven-image >>
    steps:
      - checkout
      - restore_cache:
          name: Restoring Maven Cache
          keys:
            - maven-cache_v1-<< parameters.maven-image >>-
      - run:
          name: "Check dependency licenses"
          command: mvn license:check -Dlicense.dependencies.enforce=true

workflows:
  version: 2
  build:
    jobs:
      - check-dependencies
      - check-licenses
      - tests-java:
          name: jdk-8
      - tests-java:
          name: jdk-11
          maven-image: "cimg/openjdk:11.0"
      - tests-java:
          name: jdk-17
          maven-image: "cimg/openjdk:17.0"
      - tests-java:
          name: jdk-19
          maven-image: "cimg/openjdk:19.0"
